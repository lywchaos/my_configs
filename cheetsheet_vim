count    count后跟命令, 意思是重复命令count次, 但是注意,比如3at这样的命令,如果意图是插入3个t的话,后面要立马接esc才能完成命令,不然就只是直接进入插入模式了  02
count G    光标移动到count行  03
count %    光标移动到文档的第百分之count处  03
count $    移动到第count行的末尾, 注意, count ^ 并不会移动到第count行的行首 03
ctrl D/U    向下/上scroll半页  03
ctrl F/B    向下/上scroll一页  03
ctrl o    jump back  01
ctrl r    撤销上个u  02
ctrl ]    跳到光标所在位置的超链接处  01
f char    行内查找char,另外,";"是重复查找,","是重复反向查找 03
help    非常全面的help写法  02
H M L    光标移动到当前页顶/中/底  03
J    join, 把光标放在第1行首,然后按J,结果是下一行自动接在光标行后,且自动加空格  02
:jumps    列出jump历史  03
`mark    jump到上个mark处, ``会在上个mark和当前位置之间来回跳, 原因是`命令本身也是jump的意思(需要注意的是jump的定义:使用命令移动到非当前行的动作就是一个jump; 而jk这样的不算jump, 就算你前面加了count看起来很像使用命令去移动的也不算); 可以使用ma来将光标处设为mark a,这样就可以`a来jump到这个位置,总共可以设置a-z26个mark; :marks列出所有mark  03
! move cmd    move范围内的文本被当作后续cmd命令的输入, 结果输出到原地
/pattern    搜索pattern, n是向右重复搜索, N是向前; 可以用上下键来使用历史搜索的pattern  03
/^pattern    只搜索在行首的pattern  03
/pattern$    只搜索在行尾的pattern  03
:scriptnames    显示许多.vim文件路径, 比如 init.vim  03
:set ignorecase/noignorecase    搜索时是否忽略大小写  03
:set (no)hlsearch    搜索时是否显示高光  03
:set (no)incsearch    在输入搜索pattern时,是否实时显示匹配结果,建议打开    03
:set number/nonumber    显示/关闭行号  03
:set ruler    在右下角显示光标位置  03
/\<the\>    全词匹配搜索the, \用来转义, \<表示以the开始, \>表示以the结束  03
u    undo, 撤销上个操作  02
zz zt zb    将当前行scroll到页中/顶/底  03
%    括号匹配,若当前光标处是括号,则移动到匹配的括号处;否则,在行内向右寻找括号并移动到括号处;如果行内没有括号,就没有作用  03
/\.    搜索点号. 转义是因为pattern是按照正则来搜索的,而正则的点号是匹配任意一个字符  03
#/*    向上/下搜索光标指向的单词(全词匹配), g#/g* 可以用来部分匹配  03
该看04了
