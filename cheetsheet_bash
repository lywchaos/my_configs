(bash) assignment expression : no spaces arount = 
(bash) var=$(cmd) : assign the cmd output to var 
(bash) var=$(cmd) WARNING : $(cmd) will be executed in a subshell , which means this cmd can't use other variables of the script
(bash) $var : use the value of var
cp arguments can be pattern
cp from_file_path to_dir_path : copy file to dir, you can use '.' as to_dir_path
cp from_file_path to_file_path : default OVERRIDE , -i if you wanna check whether or not you really want to copy;
cp -R from_dir_path to_dir_path : copy dir 
ls pattern : output ls results that match the pattern
mkdir -p : create multilevel directory
mv from_file to_file/to_dir : move and rename
set : show all enviroment variable
cmd1 | cmd2 : called pipe, the output of cmd1 as the input of cmd2; interestingly, cmd1 and cmd2 are not executed in sequence, but simultaneously
$? : the exit status of the last cmd
(bash) if cmd1 then cmds fi : do cmds if the exit status of cmd1 is 0
(bash) if test condition then cmds fi : condition can be [number compare/string compare/file compare]
(bash) if [ condition ] then cmds fi : WARNING: one space around condition
